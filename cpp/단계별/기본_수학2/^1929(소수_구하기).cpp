// 일반적인 for문으로 소수를 찾으려고 하면 시간초과가 발생하므로 에라토스테네스의 체를 이용한다.
// 
//소수를 빠르게 판정하는 방법에는 여러 가지가 있지만,
//그 중 가장 간단하면서도 시간 복잡도를 크게 개선시킬 수 있는 것은 그 수의 제곱근까지만 나누어보는 것이다.
//즉, i* i <= n일 때까지만 루프를 돌면서 하나라도 나누어 떨어지는 것이 있으면 소수가 아니고, 없으면 소수다.
//왜 그럴까?
//만일 어떤 자연수 x에 sqrt(x)보다 큰 소인수가 존재한다면, x를 그 소인수로 나눈 값은 sqrt(x)보다 작아야 하기 때문에,
//2부터 순차적으로 i를 증가시키는 동안 이미 그 수로 나누어보았을 것이기 때문이다.

#include <iostream>
#include <cmath>
using namespace std;

int main() {
	int M, N;
	int root;
	cin >> M >> N;

	for (int i = M; i <= N; i++) {
		root = sqrt(i);

		if (root == 1 && i != 1) {	//2,3인 경우
			cout << i << '\n';
			continue;
		}

		if (i % 2) {	//홀수일 경우
			for (int j = 2; j <= root; j++) {		// i가 17이라고 하면, 17의 제곱근은 4이고, 17이 2,3,4의 배수인지만 확인하면 되는 것.
				if (!(i % j))		// 인수가 하나라도 있으면 탈출
					break;
				if (j == root)		// 인수가 없으면 비로소 소수
					cout << i << '\n';
			}
		}
	}
}